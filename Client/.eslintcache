[{"/Users/berat/Documents/projects/image-editor/Client/src/index.tsx":"1","/Users/berat/Documents/projects/image-editor/Client/src/reportWebVitals.ts":"2","/Users/berat/Documents/projects/image-editor/Client/src/App.tsx":"3"},{"size":547,"mtime":1608066547555,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1608061814130,"results":"6","hashOfConfig":"5"},{"size":6537,"mtime":1608122799520,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1tzp5di",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/berat/Documents/projects/image-editor/Client/src/index.tsx",[],["16","17"],"/Users/berat/Documents/projects/image-editor/Client/src/reportWebVitals.ts",[],"/Users/berat/Documents/projects/image-editor/Client/src/App.tsx",["18"],"import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport {\n  Button,\n  Container,\n  Form,\n  Image,\n  Navbar,\n  Row,\n  Spinner,\n} from \"react-bootstrap\";\n\nfunction App() {\n  let [image, setImage] = useState<File>();\n  let [newImage, setNewImage] = useState<string>();\n  let [newImageLoading, setNewImageLoading] = useState<boolean>();\n  let [height, setHeight] = useState<number>();\n  let [width, setWidth] = useState<number>();\n  let [preserveRatio, setPreserveRatio] = useState<boolean>();\n  let [grayscale, setGrayscale] = useState<boolean>();\n\n  const onImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files![0];\n    if (file !== null) {\n      setImage(file);\n      setNewImage(undefined);\n    }\n  };\n\n  const onHeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const num = parseInt(event.target.value);\n    if (!isNaN(num)) {\n      setHeight(parseInt(event.target.value));\n    } else {\n      setHeight(undefined);\n    }\n  };\n\n  const onWidthChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const num = parseInt(event.target.value);\n    if (!isNaN(num)) {\n      setWidth(parseInt(event.target.value));\n    } else {\n      setWidth(undefined);\n    }\n  };\n\n  const onPreserveRatioChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setPreserveRatio(preserveRatio === undefined ? true : !preserveRatio);\n  };\n\n  const onGrayscaleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGrayscale(grayscale === undefined ? true : !grayscale);\n  };\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Navbar.Brand>\n          Welcome to Random Image!\n        </Navbar.Brand>\n      </Navbar>\n      <Container\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          padding: \"12px 0px 12px 0\",\n          justifyContent: \"center\",\n        }}\n      >\n        {image !== undefined ? (\n          <Row style={{ alignItems: \"center\" }}>\n            <Image\n              style={{ maxHeight: \"320px\", paddingRight: \"12px\" }}\n              src={URL.createObjectURL(image)}\n              rounded\n            />\n            {newImage !== undefined ? (\n              <Image\n                style={{ maxHeight: \"320px\" }}\n                src={`data:image/jpeg;base64,${newImage}`}\n                rounded\n              />\n            ) : (\n              <div />\n            )}\n            {newImageLoading ? <Spinner animation=\"border\" /> : <div />}\n          </Row>\n        ) : (\n          <div />\n        )}\n        <Form\n          onSubmit={async (e) => {\n            try {\n              if (image === undefined) {\n                alert(\"Must enter an image!\");\n                return;\n              }\n              e.preventDefault();\n              var data = new FormData();\n              data.append(\"file\", image);\n\n              if (grayscale !== undefined)\n                data.append(\"grayscale\", JSON.stringify(grayscale));\n              if (height !== undefined)\n                data.append(\"height\", JSON.stringify(height));\n              if (width !== undefined)\n                data.append(\"width\", JSON.stringify(width));\n              if (preserveRatio !== undefined)\n                data.append(\n                  \"preserveAspectRatio\",\n                  JSON.stringify(preserveRatio)\n                );\n\n              setNewImage(undefined);\n              setNewImageLoading(true);\n              const res = await fetch(\"http://127.0.0.1:8080/upload\", {\n                method: \"POST\",\n                body: data,\n              });\n              const json = await res.json();\n              console.log(json);\n              if (json[\"status\"] === true) {\n                setNewImageLoading(false);\n                setNewImage(json[\"file\"]);\n              } else {\n                throw json;\n              }\n            } catch (e) {\n              console.log(e);\n              setNewImageLoading(false);\n              if (e[\"error\"] === true) {\n                alert(e[\"reason\"]);\n              } else if (e[\"status\"] === false) {\n                alert(e[\"message\"]);\n              }\n            }\n          }}\n        >\n          <Form.Group>\n            <Form.Label>Image</Form.Label>\n            <Form.File\n              onChange={onImageChange}\n              id=\"custom-file\"\n              accept=\"image/*\"\n              label={image !== undefined ? image?.name : \"Image\"}\n              custom\n            />\n            <Form.Text className=\"text-muted\">Select your image.</Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Height</Form.Label>\n            <Form.Control\n              value={height}\n              onChange={onHeightChange}\n              type=\"number\"\n              placeholder=\"Enter height\"\n              min={10}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter new image height. Leave blank to not change it.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Width</Form.Label>\n            <Form.Control\n              value={width}\n              onChange={onWidthChange}\n              type=\"number\"\n              placeholder=\"Enter width\"\n              min={10}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter new image width. Leave blank to not change it.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Check\n              checked={preserveRatio ?? false}\n              onChange={onPreserveRatioChange}\n              type=\"checkbox\"\n              label=\"Preserve Aspect Ratio\"\n            />\n            <Form.Text className=\"text-muted\">\n              Check to preserve the aspect ratio if only height or width is\n              provided.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Check\n              checked={grayscale ?? false}\n              onChange={onGrayscaleChange}\n              type=\"checkbox\"\n              label=\"Grayscale\"\n            />\n            <Form.Text className=\"text-muted\">\n              Check to make the image grayscale.\n            </Form.Text>\n          </Form.Group>\n          <Row style={{ justifyContent: \"center\" }}>\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Row>\n        </Form>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":2,"column":8,"nodeType":"25","messageId":"26","endLine":2,"endColumn":12},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]