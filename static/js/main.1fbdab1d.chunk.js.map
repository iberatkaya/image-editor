{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","image","setImage","newImage","setNewImage","newImageLoading","setNewImageLoading","height","setHeight","width","setWidth","blurRadius","setBlurRadius","preserveRatio","setPreserveRatio","grayscale","setGrayscale","Navbar","bg","variant","sticky","Brand","Container","style","display","flexDirection","alignItems","padding","justifyContent","undefined","Row","Image","maxHeight","paddingRight","src","URL","createObjectURL","rounded","Spinner","animation","Form","onSubmit","e","a","alert","preventDefault","data","FormData","append","JSON","stringify","fetch","method","body","res","json","console","log","Group","Label","File","onChange","event","file","target","files","id","accept","label","name","custom","Text","className","Control","value","num","parseInt","isNaN","type","placeholder","min","max","Check","checked","_","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fbdab1d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {\n  Button,\n  Container,\n  Form,\n  Image,\n  Navbar,\n  Row,\n  Spinner,\n} from \"react-bootstrap\";\n\nfunction App() {\n  let [image, setImage] = useState<File>();\n  let [newImage, setNewImage] = useState<string>();\n  let [newImageLoading, setNewImageLoading] = useState<boolean>();\n  let [height, setHeight] = useState<number>();\n  let [width, setWidth] = useState<number>();\n  let [blurRadius, setBlurRadius] = useState<number>();\n  let [preserveRatio, setPreserveRatio] = useState<boolean>();\n  let [grayscale, setGrayscale] = useState<boolean>();\n\n  const onImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files![0];\n    if (file !== null) {\n      setImage(file);\n      setNewImage(undefined);\n    }\n  };\n\n  const onHeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const num = parseInt(event.target.value);\n    if (!isNaN(num)) {\n      setHeight(parseInt(event.target.value));\n    } else {\n      setHeight(undefined);\n    }\n  };\n\n  const onWidthChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const num = parseInt(event.target.value);\n    if (!isNaN(num)) {\n      setWidth(parseInt(event.target.value));\n    } else {\n      setWidth(undefined);\n    }\n  };\n\n  const onBlurRadiusChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const num = parseInt(event.target.value);\n    if (!isNaN(num)) {\n      setBlurRadius(parseInt(event.target.value));\n    } else {\n      setBlurRadius(undefined);\n    }\n  };\n\n  const onPreserveRatioChange = (_: React.ChangeEvent<HTMLInputElement>) => {\n    setPreserveRatio(preserveRatio === undefined ? true : !preserveRatio);\n  };\n\n  const onGrayscaleChange = (_: React.ChangeEvent<HTMLInputElement>) => {\n    setGrayscale(grayscale === undefined ? true : !grayscale);\n  };\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Navbar.Brand>Welcome to Image Editor!</Navbar.Brand>\n      </Navbar>\n      <Container\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          padding: \"12px 0px 12px 0\",\n          justifyContent: \"center\",\n        }}\n      >\n        {image !== undefined ? (\n          <Row style={{ alignItems: \"center\" }}>\n            <Image\n              style={{ maxHeight: \"320px\", paddingRight: \"12px\" }}\n              src={URL.createObjectURL(image)}\n              rounded\n            />\n            {newImage !== undefined ? (\n              <Image\n                style={{ maxHeight: \"320px\" }}\n                src={`data:image/jpeg;base64,${newImage}`}\n                rounded\n              />\n            ) : (\n              <div />\n            )}\n            {newImageLoading ? <Spinner animation=\"border\" /> : <div />}\n          </Row>\n        ) : (\n          <div />\n        )}\n        <Form\n          onSubmit={async (e) => {\n            try {\n              if (image === undefined) {\n                alert(\"Must enter an image!\");\n                return;\n              }\n              e.preventDefault();\n              var data = new FormData();\n              data.append(\"file\", image);\n\n              if (grayscale !== undefined)\n                data.append(\"grayscale\", JSON.stringify(grayscale));\n              if (height !== undefined)\n                data.append(\"height\", JSON.stringify(height));\n              if (width !== undefined)\n                data.append(\"width\", JSON.stringify(width));\n              if (blurRadius !== undefined)\n                data.append(\"blurRadius\", JSON.stringify(blurRadius));\n              if (preserveRatio !== undefined)\n                data.append(\n                  \"preserveAspectRatio\",\n                  JSON.stringify(preserveRatio)\n                );\n\n              setNewImage(undefined);\n              setNewImageLoading(true);\n              const res = await fetch(\"https://ibk-image-editor.herokuapp.com/upload\", {\n                method: \"POST\",\n                body: data,\n              });\n              const json = await res.json();\n              console.log(json);\n              if (json[\"status\"] === true) {\n                setNewImageLoading(false);\n                setNewImage(json[\"file\"]);\n              } else {\n                throw json;\n              }\n            } catch (e) {\n              console.log(e);\n              setNewImageLoading(false);\n              if (e[\"error\"] === true) {\n                alert(e[\"reason\"]);\n              } else if (e[\"status\"] === false) {\n                alert(e[\"message\"]);\n              }\n            }\n          }}\n        >\n          <Form.Group>\n            <Form.Label>Image</Form.Label>\n            <Form.File\n              onChange={onImageChange}\n              id=\"custom-file\"\n              accept=\"image/*\"\n              label={image !== undefined ? image?.name : \"Image\"}\n              custom\n            />\n            <Form.Text className=\"text-muted\">Select your image.</Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Height</Form.Label>\n            <Form.Control\n              value={height}\n              onChange={onHeightChange}\n              type=\"number\"\n              placeholder=\"Enter height\"\n              min={10}\n              max={2000}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter new image height. Leave blank to not change it.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Width</Form.Label>\n            <Form.Control\n              value={width}\n              onChange={onWidthChange}\n              type=\"number\"\n              placeholder=\"Enter width\"\n              min={10}\n              max={2000}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter new image width. Leave blank to not change it.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Blur Radius</Form.Label>\n            <Form.Control\n              value={blurRadius}\n              onChange={onBlurRadiusChange}\n              type=\"number\"\n              placeholder=\"Enter blur radius\"\n              min={0}\n              max={60}\n            />\n            <Form.Text className=\"text-muted\">\n              Enter the Gaussian blur radius. Leave blank to not apply it.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Check\n              checked={preserveRatio ?? false}\n              onChange={onPreserveRatioChange}\n              type=\"checkbox\"\n              label=\"Preserve Aspect Ratio\"\n            />\n            <Form.Text className=\"text-muted\">\n              Check to preserve the aspect ratio if only height or width is\n              provided.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Check\n              checked={grayscale ?? false}\n              onChange={onGrayscaleChange}\n              type=\"checkbox\"\n              label=\"Grayscale\"\n            />\n            <Form.Text className=\"text-muted\">\n              Check to make the image grayscale.\n            </Form.Text>\n          </Form.Group>\n          <Row style={{ justifyContent: \"center\" }}>\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Row>\n        </Form>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}